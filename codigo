#include <WiFi.h>
#include <PubSubClient.h>

// Pines de los sensores
#define PIR_PIN 2           // Pin conectado al sensor PIR HC-SR501
#define FC51_PIN 3          // Pin conectado al módulo FC-51 (infrarrojo)
#define TRIG_PIN 4          // Pin Trig del sensor ultrasónico
#define ECHO_PIN 5          // Pin Echo del sensor ultrasónico

// Variables de estado
int pirState = LOW;         // Estado del sensor PIR
int fc51State = LOW;        // Estado del sensor FC-51
long duration;              // Tiempo de respuesta del sensor ultrasónico
float distance;             // Distancia calculada en cm

// Configuración Wi-Fi
const char* ssid = "TU_SSID";          // Cambia por el nombre de tu red Wi-Fi
const char* password = "TU_PASSWORD";  // Cambia por la contraseña de tu red Wi-Fi

// Configuración del broker MQTT
const char* mqtt_server = "broker.emqx.io"; // Cambia al dominio/IP de tu broker EMQX
const int mqtt_port = 1883;                // Puerto del broker MQTT
const char* mqtt_user = "usuario";         // Si el broker tiene usuario, cámbialo
const char* mqtt_password = "contraseña";  // Si el broker tiene contraseña, cámbiala

WiFiClient espClient;
PubSubClient client(espClient);

// Función para conectarse al broker MQTT
void reconnect() {
  while (!client.connected()) {
    Serial.print("Conectando al broker MQTT...");
    if (client.connect("ESP32Client", mqtt_user, mqtt_password)) {
      Serial.println("Conectado!");
    } else {
      Serial.print("Error de conexión. Código: ");
      Serial.println(client.state());
      delay(2000); // Intentar reconectar cada 2 segundos
    }
  }
}

void setup() {
  Serial.begin(115200); // Iniciar comunicación serial
  
  // Configuración de pines
  pinMode(PIR_PIN, INPUT);     // PIR como entrada
  pinMode(FC51_PIN, INPUT);    // FC-51 como entrada
  pinMode(TRIG_PIN, OUTPUT);   // Trig del ultrasónico como salida
  pinMode(ECHO_PIN, INPUT);    // Echo del ultrasónico como entrada

  // Conexión a la red Wi-Fi
  Serial.println("Conectando a Wi-Fi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConexión Wi-Fi establecida!");

  // Configuración del broker MQTT
  client.setServer(mqtt_server, mqtt_port);

  // Mensajes iniciales
  Serial.println("Iniciando sensores...");
}

void loop() {
  // Reconnectar al broker si la conexión se pierde
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // 1. Lectura del sensor PIR (HC-SR501)
  pirState = digitalRead(PIR_PIN);
  if (pirState == HIGH) {
    Serial.println("Movimiento detectado (PIR)!");
    client.publish("sensores/pir", "Movimiento detectado");
  }

  // 2. Lectura del módulo FC-51 (infrarrojo)
  fc51State = digitalRead(FC51_PIN);
  if (fc51State == LOW) {
    Serial.println("Objeto detectado (FC-51)!");
    client.publish("sensores/infrarrojo", "Objeto detectado");
  }

  // 3. Medición del sensor ultrasónico (HC-SR04)
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Calcular la duración del pulso de respuesta del sensor ultrasónico
  duration = pulseIn(ECHO_PIN, HIGH);

  // Convertir duración a distancia (en cm)
  distance = (duration * 0.034) / 2;

  // Publicar distancia en el broker MQTT
  char distanciaStr[8]; // Convertir distancia a string para publicarla
  dtostrf(distance, 6, 2, distanciaStr);
  Serial.print("Distancia medida (Ultrasónico): ");
  Serial.print(distance);
  Serial.println(" cm");
  client.publish("sensores/ultrasonico", distanciaStr);

  // Esperar 500 ms antes del próximo ciclo
  delay(500);
